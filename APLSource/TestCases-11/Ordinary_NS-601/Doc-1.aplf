 Doc
⍝ Automated Documentation Generation
⍝ ----------------------------------
⍝
⍝ ### Overview
⍝
⍝ This class is useful for analysing one or more scripts or/and, if certain
⍝ conditions are fulfilled, [ordinary namespaces](#) for documentation
⍝ purposes. Note that the documentation is meant to be useful for the **user**
⍝ of a class, not the designer/programmer of a class.
⍝
⍝ There are three different ways to make use of `ADOC` in order to extract
⍝ information from a class or script:
⍝
⍝ * Getting a list of methods, properties and fields (`Info` method)
⍝ * Getting a list of methods, properties and fields with additional information
⍝ (`Info` method with "full" parameter)
⍝ * Creating a single HTML page with all information available, including any
⍝ documentation (`Browse` method).
⍝
⍝ The last one is by far the most powerful and popular option since it allows
⍝ one to include additional information within a script: all "leading comments"
⍝ are treated as special information. One can use Markdown to format
⍝ the documentation. When you read this your are looking at `ADOC`'s own
⍝ documentation created this way.
⍝
⍝ * See [Misc](#) for a definition of "leading comments".
⍝ * See [Markup syntax](#) for details of how to do the mark-up.
⍝
⍝ ### Usage in the workpace
⍝
⍝ #### Info
⍝ For a quick glance you can use the shared method `Info`, for example:
⍝
⍝ ~~~
⍝ ADOC.Info ADOC
⍝ ~~~
⍝
⍝ For a more detailed report specify `'full'` as the left argument:
⍝
⍝ ~~~
⍝ 'full' ADOC.Info ADOC
⍝ ~~~
⍝
⍝
⍝ #### Full report
⍝ For an all-singing-all-dancing report, use the `Browse` method:
⍝
⍝ ~~~
⍝ ADOC.Browse ADOC
⍝ ~~~
⍝
⍝ By definition the `Browse` method displays the HTML file with your default browser.
⍝
⍝ ### ADOC as a User Command
⍝
⍝ Normally you will use `ADOC` as a User Command. For details see
⍝ <http://aplwiki.com/UserCommands/Adoc>
⍝
⍝ ### What ADOC considers as documentation
⍝
⍝ Note that comments are recognized only if and as long as they are following
⍝ the "header": the top of a script as well as function and operator headers,
⍝ property or field definitions **after** the removal of empty lines and any
⍝ code lines that carry an `:Access ...` statement.
⍝
⍝ In case you want to exclude a particular line from those leading comments
⍝ use two lamps (`⍝⍝`) at the beginning of the line. This does **not** break
⍝ the connections with comments further down the line. Example:
⍝
⍝ ~~~
⍝ ⍝⍝ This line won't show in the `ADOC` documentation.
⍝ ~~~
⍝
⍝ The `ADOC` class itself uses all mark-up features available and therefore
⍝ acts as a self-reference.
⍝
⍝ ### :Require
⍝ With version 15.0 Dyalog has introduced the `:Require` keyword for defining
⍝ dependencies. Since this keyword lives outside classes and namespaces while
⍝ the older synonym `⍝∇:require` lives inside classes and namespaces we have a
⍝ conflict here: `ADOC` cannot report what's not in the source code; as a
⍝ consequence it can only report on `⍝∇:require` but not on `:Require`.
⍝
⍝ ### Parameter space
⍝
⍝ A parameter space is by definition a named namespace that carries variables
⍝ recognized by `ADOC`. Such a namespace can be created by `⎕NS` and then
⍝ populated with variables although this is **not** recommended.
⍝
⍝ Instead it is recommended to call `ADOC.CreateBrowseDefaults` which returns
⍝ such a namespace populated with all the variables `ADOC` would recognize with
⍝ reasonable defaults.
⍝ Such a namespace can then be passed as left argument to the `Browse` function.
⍝ For more details see [ADOC.Browse with individual settings](#).
⍝
⍝ ### Markup syntax
⍝
⍝ #### Overview
⍝
⍝ One can use Markdown, a simplified markup language, within the comment sections
⍝ of public functions and the so-called leading comments of scripts. `ADOC`
⍝ itself can be used as an example: it makes use of all markups available:
⍝
⍝ * Headers
⍝ * Lists
⍝   1. Ordered lists
⍝   1. Unordered lists
⍝ * APL code
⍝   * Inline APL code
⍝   * APL code blocks
⍝ * Tables
⍝ * Paragraphs
⍝ * Misc
⍝
⍝ #### Paragraphs
⍝
⍝ Paragraphs are the most basic thing you can specify. The definition is easy:
⍝ everything that does not qualify as something else is a paragraph. A paragraph
⍝ ends with an empty line.
⍝
⍝ You can insert a line break anywhere in a paragraph by inserting `<<br>>`.
⍝ You can also insert a line break by putting a single backslash (`\`) at the end
⍝ of a line.
⍝
⍝ Rather than ending a paragraph with an empty line you can also separate one paragraph
⍝ from another by putting two backslashes at the end of a line. Therefore this:
⍝
⍝ ~~~
⍝ One paragraph.\\
⍝ Another paragraph.
⍝ ~~~
⍝ results in this:
⍝
⍝ One paragraph.\\
⍝ Another paragraph.
⍝
⍝ This is not a feature of the underlying Markdown parser (MarkAPL), it is a feature of
⍝ `ADOC`: it's particularly useful in order to avoid too many empty lines when documenting
⍝ plenty of functions.
⍝
⍝ Note that trailing blanks are removed from all the lines that form all paragraphs in
⍝ any case.
⍝
⍝ #### Headers
⍝
⍝ Headers use `#` to the left as indicator of depth. Therefore...
⍝
⍝ ~~~
⍝ # is a header of level one
⍝ ## is a header of level two
⍝ ### is a header of level three
⍝ #### is a header of level four
⍝ ~~~
⍝
⍝ Note that headers of level one are reserved by `ADOC` for marking up several classes
⍝ and should therefore not be used.
⍝
⍝ #### Lists
⍝
⍝ This:
⍝
⍝ ~~~
⍝ * Item 1
⍝ ~~~
⍝
⍝ results in a bulleted list item while this
⍝
⍝ ~~~
⍝ 1. Item 1
⍝ ~~~
⍝
⍝ results in a numbered list item.
⍝
⍝ Nested lists are allowed but one level only. Note that the number of blanks rules
⍝ the nesting. For example:
⍝
⍝ ~~~
⍝ * Bullet item 1
⍝ * Bullet item 2
⍝   5. Nested numbered item 1
⍝   5. Nested numbered item 2
⍝ * Bullet item 3
⍝   * Bullet sub-item 1
⍝   * Bullet sub-item 2
⍝ * Bullet item 4
⍝ ~~~
⍝
⍝ This code would generate this:
⍝
⍝ * Bullet item 1
⍝ * Bullet item 2
⍝   5. Nested numbered item 1
⍝   5. Nested numbered item 2
⍝ * Bullet item 3
⍝   * Bullet sub-item 1
⍝   * Bullet sub-item 2
⍝ * Bullet item 4
⍝
⍝ #### Bookmarks
⍝
⍝ Links which point to a location within the same document are called bookmarks in
⍝ HTML speak. Because all headers in an `ADOC` documentation are automatically named
⍝ you can link to them from within the document.
⍝
⍝ For example, the `ADOC` documentation contains a chapter "Friendly classes" to which
⍝ you can establish a link with this:
⍝
⍝ ~~~
⍝ This internal link: [Friendly classes](#) jumps to the "Friendly classes" chapter.
⍝ ~~~
⍝
⍝ That results in this:
⍝
⍝ This internal link: [Friendly classes](#) jumps to the "Friendly classes" chapter.
⍝
⍝ This works because all headers up to level 4 are marked up as an anchor automatically
⍝ by `ADOC` following a set of simple rules:
⍝
⍝ 1. Remove all formatting, links, etc.
⍝ 1. Remove everything between <>, () and [].
⍝ 1. Remove all punctuation, except underscores, hyphens, and periods.
⍝ 1. Remove all code.
⍝ 1. Remove HTML.
⍝ 1. Replace all spaces and newlines with hyphens.
⍝ 1. Convert all alphabetic characters to lowercase.
⍝ 1. Remove everything from the left until the first letter or ∆⍙ is found (identifiers may
⍝    not begin with a number or a hyphen).
⍝ 1. If nothing is left by then, use the identifier section.
⍝
⍝ Therefore the header "Friendly classes" will have a name (or bookmark) called "friendly_classes".
⍝ You can omit this by specifying just the `#` character for a bookmark link. **_MarkAPL_**
⍝ will then insert the correct link for you.
⍝
⍝ If this does not work for you for any reason you can always specify a full bookmark. For
⍝ example, if there is a bookmark "foo" somewhere in the document then this will create a
⍝ working link:
⍝
⍝ ~~~
⍝ (This goes to "foo")[#foo "Your title"]
⍝ ~~~
⍝
⍝ Notes:
⍝ * Such links are **not** case sensitive.
⍝ * All methods, fields, properties etc all have their own header, so you can jump
⍝   to them as well as in this example: `[Browse](#)`.
⍝ * Limitations:
⍝   * If the same name is used more than once then it will jump just to the first one.
⍝   * Inside a link there cannot be in-line APL code.
⍝ * After following such a link pressing `<backspace>` brings you back to where you
⍝   came from.
⍝ * In order to make the link appear as APL code:
⍝
⍝ ~~~
⍝ `[LinkText](#)`
⍝ ~~~
⍝
⍝ Note that at the time of writing (2015-05) some browsers (namely Chrome and IE)
⍝ have a problem: they sometimes - but not always - don't use the APL385 Unicode font
⍝ for such links.
⍝
⍝ On inspection the browser's HTML code does have an empty <span> which explains
⍝ why the link is not showing up as intended. However, the HTML code on file is correct.
⍝
⍝ #### APL Code
⍝
⍝ Note that you can embedd APL code into an ordinary paragraph like
⍝ this `{⍵/⍳⍴,⍵}` piece of code by enclosing the APL code with a
⍝ tick on both sides:
⍝
⍝ ~~~
⍝ `{⍵/⍳⍴,⍵}`
⍝ ~~~
⍝
⍝ You can also mark APL code up  as a code block with three `~`:
⍝
⍝ <pre>
⍝ ~~~
⍝ {⍵/⍳⍴,⍵}
⍝ {(+/⍵)÷⍴,⍵}
⍝ ~~~
⍝ </pre>
⍝
⍝ Finally you can mark up APL code block by enclosing them with the HTML tag `<pre>`.
⍝
⍝ Note that anything marked up as a code block is **not**
⍝ restricted in terms of width; it is up to you to handle this appropriately.
⍝
⍝ However, a scroll bar is provided in case the code is too long but that won't help when it comes to printing:
⍝
⍝ ~~~
⍝ 0123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
⍝ ~~~
⍝
⍝ You don't have to worry about the APL characters <, > and & within code: `ADOC` will handle this for you.
⍝
⍝ Blanks in code blocks are preserved; this has three leading blanks:
⍝
⍝ <pre>
⍝ ~~~
⍝    {⍵/⍳⍴,⍵}
⍝ ~~~
⍝ </pre>
⍝
⍝ #### Tables
⍝
⍝ Tables use `|` for cell definitions. Note that the first row is treated as column headers but only if the next
⍝ line consists of pipe symbols and dashes, and possibly colons.
⍝
⍝ The following example also shows APL code and line breaks within a cell; this:
⍝
⍝ ~~~
⍝ | Col 1           | Col 2     | Column 3        |
⍝ |-----------------|-----------|-----------------|
⍝ |Row 1/ Col 1     |Row 1/Col2 |                 |
⍝ |  Row 2/ Col 1   |Row 2/Col2 | `{⍵/⍳⍴,⍵}`      |
⍝ |Row 3/ Col 1     |Row 3/Col2 | Row 3<<br>>Col 3 |
⍝ ~~~
⍝
⍝ results in this:
⍝
⍝ |Col 1            |Col 2      |Column 3         |
⍝ |-----------------|-----------|-----------------|
⍝ |Row 1/ Col 1     |Row 1/Col2 |                 |
⍝ |  Row 2/ Col 1   |Row 2/Col2 | `{⍵/⍳⍴,⍵}`      |
⍝ |Row 3/ Col 1     |Row 3/Col2 | Row 3<<br>>Col 3 |
⍝
⍝ Colons in the second line can be used to indicate alignment; This:
⍝
⍝ ~~~
⍝ |:------|:-------:|-----:|
⍝ ~~~
⍝
⍝ leads to this output:
⍝
⍝ |Left   |Centered |Right |
⍝ |:------|:-------:|-----:|
⍝ |1000   |2000 | 3000     |
⍝ |1   |2 | 3     |
⍝
⍝ #### Emphasis (bold, strong)
⍝
⍝ Anything between two pairs of either `*` or `_` gets marked up as <strong>,
⍝ for example: `**bold**` leads to **bold**.
⍝
⍝ #### Misc
⍝
⍝ Note that you can insert <, > and & as part of the text without further ado.
⍝
⍝ ### Ordinary namespaces
⍝
⍝ #### Overview
⍝
⍝ Originally `ADOC` was designed to process just scripts (class scripts as well as
⍝ namespace scripts), including :Include(d) namepaces, but it was not designed
⍝ to process ordinary namespaces as such. However, starting with version 3.0 you
⍝ can specify the name of a function that follows the same rules as the "leading
⍝ comments" in a script. Such functions can also act as "containers" when
⍝ multiple references/names are specified.
⍝
⍝ #### Calling syntax
⍝
⍝ For a script one must pass a reference to that script as the right argument,
⍝ for example:
⍝
⍝ ~~~
⍝ ADOC.Browse #.MyScript
⍝ ~~~
⍝
⍝ `ADOC` then extracts the documentation from that script.
⍝
⍝ This is not possible with an ordinary (non-scripted) namespace. For that
⍝ reason one needs to provide the name of a function containing the information
⍝ needed by `ADOC`. As usual all lines must start with a comment lamp.
⍝
⍝ ### Reserved names
⍝
⍝ Since version 3.0 `ADOC` looks for a number of fixed names. If there
⍝ is a function with such a name to be found, that function is executed and the
⍝ result returned by that function is taken into account. The syntax rules are
⍝ fixed: if such a function does not honor the syntax rules it will fail.
⍝
⍝ However, since the call is trapped that won't stop `ADOC` from producing a result.
⍝
⍝ If there is accidentically a name with such a "reserved" name but it is not
⍝ designed to deliver information to `ADOC` for documentation purposes you can
⍝ prevent `ADOC` from executing that function by setting "ignore{fixedName}" to 1.
⍝
⍝ All these functions must be niladic traditional functions marked as:
⍝
⍝ ~~~
⍝ :Access Public Shared
⍝ ~~~
⍝
⍝ and they must return a result.
⍝
⍝ Underneath the functions are listed which will be honoured in case they exist.
⍝
⍝ #### Copyright
⍝
⍝ Must return a vector of strings.
⍝
⍝ #### History
⍝
⍝ Must return either a simple string or a vectors of strings.
⍝
⍝ #### Version
⍝
⍝ Must return a vector of length three:
⍝
⍝ 1. The name, for example `ADOC`
⍝ 1. A string with version information, for example "1.2.3"
⍝ 1. A string representing a date, for example "2009-01-01"
⍝
⍝ Exampel: A function returning this:
⍝
⍝ ~~~
⍝ ('1.2.3' '2009-06-01')←1↓#.MyOrdNameSp.Version ⍬
⍝ ~~~
⍝
⍝ let `ADOC` produce this information:
⍝ "Version 1.2.3 from 2009-06-02"
⍝
⍝ #### Specialties
⍝
⍝ #### :Include
⍝
⍝ Since version 1.3, `ADOC` is processessing `:Include`d namespaces.
⍝
⍝ This means that included stuff is "imported" in the first place, then the result
⍝ is analyzed.
⍝
⍝ #### Embedded classes
⍝
⍝ If you would like to create an HTML report on embedded classes within a host
⍝ class you can do this by setting `embeddedClassesFlag←1` within a
⍝ [parameter space](#). Alternatively you can just specify a `1` as left argument to `Browse`.
⍝
⍝ Example:
⍝
⍝ ~~~
⍝ 1 ADOC.Browse ADOC
⍝ ~~~
⍝
⍝ would create a single report that contains all classes embedded into `ADOC`.
⍝
⍝ If you want not all but only one or some of the classes embedded into another
⍝ class then you can either assign the name(s) to `embeddedClassNames` within
⍝ a parameter space or specify the name(s) as left argument to the `Browse`
⍝ function as shown in these examples:
⍝
⍝ ~~~
⍝ 1 ADOC.Browse ADOC
⍝ 'Demo' ADOC.Browse ADOC
⍝ ~~~
⍝
⍝ #### CSS Style sheets
⍝
⍝ With version 1.4 the way style sheets are used has changed: `ADOC` now
⍝ creates its own style sheets dynamically.
⍝
⍝ ### ADOC.Browse with individual settings
⍝
⍝ In general, to make use of the many fields and properties available to make
⍝ `ADOC` suit your needs, you need to create an instance. However, **some**
⍝ of the properties can be set without creating an instance.
⍝
⍝ In order to achieve that you must create a so-called parameter space and
⍝ populate it with variables holding the desired values. For example:
⍝
⍝ ~~~
⍝ p←⎕ns ''
⍝ p.FullDocName←'test.htm'
⍝ p.Caption←'My Main Header'
⍝ p ADOC.Browse ADOC
⍝ ~~~
⍝
⍝ These properties can be set via such a parameter namespace:
⍝ * `BrowserName`
⍝ * `BrowserPath`
⍝ * `Caption`
⍝ * `IgnorePattern`
⍝ * `embeddedClassNames`
⍝ * `Inherit`
⍝ * `RefToUnicodeFile` (deprecated)
⍝ * `ignoreCopyright`
⍝ * `ignoreHistory`
⍝ * `ignoreVersion`
⍝
⍝ After having set the properties to the appropriate values one can call the method
⍝ `Make` to create the final document:
⍝ ~~~
⍝ My.Make scriptname
⍝ ~~~
⍝
⍝ You can then restart by calling `MyAplDoc.Refresh`, or expunge your instance.
⍝
⍝ ### Friendly Classes
⍝
⍝ Friendly classes are classes who can see each others private members. At the time
⍝ being they are not available in Dyalog. However, depending on the application
⍝ friendly classes might be indispensable. As a circumvention one can use naming
⍝ conventions to deal with this. For example, you could define that all methods,
⍝ fields and properties with names starting with an underscore are "friendly".
⍝
⍝ You can tell `ADOC` to suppress all members with such a pattern by defining:
⍝
⍝ ~~~
⍝ My.IgnorePattern←'_'
⍝ ~~~
⍝
⍝ Note that for the time being that can only be a string. This restriction may be
⍝ lifted in a later version, for example by allowing a regular expression.
⍝
⍝ ### Create permanent HTML pages
⍝
⍝ "Browse" is perfect for creating and displaying information regarding a
⍝ particular script or namespace, but sometimes you might want to create
⍝ permanent HTML files and collect them for other purposes than to look at them.
⍝
⍝ #### With defaults
⍝
⍝ If you can live with the defaults, use the shared method `ProcessAsHtml`
⍝ to create a file for one or more scripts:
⍝
⍝ ~~~
⍝ ADOC.ProcessAsHtml ADOC '' ⍝ Creates page in current dir
⍝ ADOC.ProcessAsHtml (ADOC APLTreeUtils) 'c:\doc.html' ⍝ 2 scripts!
⍝ ~~~
⍝
⍝ #### Full control
⍝
⍝ One **can** gain full control by creating an instance of `ADOC`, setting
⍝ parameters appropriately and then calling particular methods. However, this
⍝ is quite a complex task, and normally there is no need to do this.
⍝
⍝ Let's look at an example.
⍝
⍝ ~~~
⍝ My←⎕NEW #.ADOC
⍝ My.(FullDocName Caption)←'test.htm' 'My Main Header'
⍝ My.Analyze scriptname       : Writes to the "Meta" property
⍝ My.CreateHtml ⍬             : Writes to the "HTML property
⍝ My.FinaliseHtml ⍬           : Add header+footer+prepare the final HTML
⍝ My.SaveHtml2File ⍬|filename : Write the HTML code to the disk
⍝ ~~~
⍝
⍝ After calling `Analyze` you can look at the result by accessing the read-only
⍝ property `Meta`. You can also create the HMTL code by calling `CreateHtml`
⍝ and then manipulate the `HTML` property which holds that code.
⍝
⍝ Author: Kai Jaeger ⋄ APL Team Ltd ⋄ http://aplteam.com
⍝ Homepage: http://aplwiki.com/ADOC
