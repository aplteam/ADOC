 R←Test_Instance_01(stopFlag batchFlag);newdoc;buffer;flag;MyADOC;⎕TRAP
⍝ Create an instance and then run the "Analyze" method
 R←T._Failed
 ⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')

 ##.ADOC.RestoreDefaults
 MyADOC←⎕NEW ##.ADOC
 MyADOC.Analyze testclass
 newdoc←MyADOC.Meta
 →T.FailsIf'testclass'≢0⊃0⊃newdoc                     ⍝ name does not match'
 →T.FailsIf'Class'≢1⊃0⊃newdoc                         ⍝ It is a class!'
 →T.FailsIf((⍕⎕THIS),'.testinterface')≢2⊃0⊃newdoc     ⍝ It is inheriting from...'

 ⍝ There is exactly 1 method both implemented and inherited from the "testinterface" interface:
 →T.FailsIf 1≠+/('Public'∘≡¨({↑⍵[1⍳⍨⍵[;0]≡¨⊂'access';1]}¨4⊃0⊃newdoc))∧(({↑⍵[1⍳⍨⍵[;0]≡¨⊂'type';1]}¨4⊃0⊃newdoc))≡¨⊂'Interface Method'    ⍝ the main comment'

 buffer←↑('type' 'Include')('access' '')('name' 'APLTreeUtils')
 →T.FailsIf buffer≢0⊃4⊃0⊃newdoc

 buffer←↑('type' 'Constructor')('name' 'make0')('access' 'Public')('syntax' 'make0')('keywords' '')('more' '')('comments'('This comment is related to the niladic constructor ' 'Two concatenated _ ' 'lines! ' 'List: ' '* First ' '* Second '))
 →T.FailsIf buffer≢1⊃4⊃0⊃newdoc

 buffer←↑('type' 'Constructor')('name' 'make1')('access' 'Public')('syntax' 'make1(arg1)')('keywords' '')('more' '')('comments'('This comment is related to the monadic constructor _ ' 'which is designed to deal with exactly one parameter '))
 →T.FailsIf buffer≢2⊃4⊃0⊃newdoc

 buffer←↑('type' 'Constructor')('name' 'make2')('access' 'Public')('syntax' 'make2(arg1 arg2)')('keywords' '')('more' '')('comments'('This comment is related to the monadic constructor _ ' 'able to deal with exactly two parameters '))
 →T.FailsIf buffer≢3⊃4⊃0⊃newdoc

 buffer←↑('type' 'Constructor')('name' 'makeAny')('access' 'Public')('syntax' 'makeAny arg')('keywords' '')('more' '')('comments'('This comment is related to the monadic constructor _ ' 'able to deal with any number of parameters '))
 →T.FailsIf buffer≢4⊃4⊃0⊃newdoc

 buffer←↑('type' 'Destructor')('name' 'Destroy')('access' 'Private')('syntax' 'Destroy')('keywords' '')('more' '')('comments'('This comment is related to the Destructor ' 'Unordered List: ' '# A Topic ' '# Another Topic '))
 →T.FailsIf buffer≢5⊃4⊃0⊃newdoc

 buffer←6⊃4⊃0⊃newdoc
 →T.FailsIf'readonly' 1≢buffer[3;]

 buffer←7⊃4⊃0⊃newdoc
 →T.FailsIf'readonly' 0≢buffer[3;]

 buffer←8⊃4⊃0⊃newdoc
 →T.FailsIf(⎕C¨buffer[5;])≢'keywords'('default' 'numbered')

 buffer←9⊃4⊃0⊃newdoc
 →T.FailsIf(⎕C¨buffer[5;])≢'keywords'(,⊂'keyed')

 buffer←10⊃4⊃0⊃newdoc
 →T.FailsIf(⎕C¨buffer[5;])≢'keywords'('default' 'numbered')

 R←T._OK
