:Class testclass : testinterface
⍝<h2>Test Support</h2>
⍝ This class contains all possible combinations ADOC is able to deal with. _
⍝ Well, hopefully...
⍝ The names choosen for the field/properties/methods reflects the settings, _
⍝ so they can be used to check the result.
⍝ For testing Interfaces, there is a special class: "testinterface"
⍝ <h3>APL Code</h3>
⍝ The comment lines are not displayed with APL385 Unicode by default, _
⍝ but you <b>can</b> include APL code as well using the &lt;pre&gt; tag:
⍝ <pre> Prim←{v/⍨2=+⌿0=v∘.|v←⍳⍵} </pre>
⍝ If you cannot see APL characters you are probably using Internet Explorer _
⍝ - good luck then!
⍝ You can insert any kind of HTML tags, but lists are supported directly, _
⍝ either as an ordered one:
⍝ * first
⍝ * second
⍝ * third
⍝ or as an unordered one:
⍝ # first
⍝ # second
⍝ # third

    :Include ##.APLTreeUtils

    :field  Public  shared MySharedField←1 2 3 ⍝ a comment about MySharedField
     ⍝ to be ignored
    :field  Public  InstaNCE MyInstanceField
    :field  Public  MyDefaultFieldPublic
    :field  private  MyPrivateField ⍝ to be ignored
    :field  MyDefaultField
    :field  Public ReadOnly MyReadOnlyField←⍬
    ⍝ to be ignored

    :property  keyed MySharedPropKeyedReadOnly
    :access  public Shared
    ⍝ Comment about MySharedPropReadOnly _
    ⍝ with concatentated lines _
    ⍝ and an unordered list:
    ⍝ # one
    ⍝ # two
    ⍝ # three
        ∇ r←get arg
          r←1
        ∇
    :endproperty⍝

    :property  Default Numbered MySharedPropDefaultNumbered ⍝ Inline comment
    ⍝ Comment about MySharedProp
    ⍝ Another comment about MySharedProp and _
    ⍝ an ordered list:
    ⍝ * first
    ⍝ * second
    :access  PUblic Shared
        ∇ r←get arg
          r←1
        ∇
        ∇ set arg
        ∇
        ∇ r←shape
          r←10
        ∇
    :endproperty

    :property  keyed MyInstancePropReadOnlykeyed ⍝ Inline comment
    :access public  Instance
        ∇ r←get arg
          r←1
        ∇
    :endproperty

    :property default numbered MyInstancePropDefaultNumbered
    :access public Instance
        ∇ r←get arg
          r←1
        ∇

        ∇ set arg
        ∇

        ∇ r←shape
        ∇
    :endproperty

    :property MyDefaultPropReadOnly
    :access public
    ⍝ This is a concatenated _
    ⍝ comment regarding the read-only property "MyDefaultPropReadOnly'
        ∇ r←get
          r←1
        ∇
    :endproperty

    :property MyDefaultProp
    :access public
        ∇ r←get
          r←1
        ∇
        ∇ set
        ∇
    :endproperty

    :property MyPrivateProp
    :access private
        ∇ r←get
          r←1
        ∇
        ∇ set
        ∇
    :endproperty

    :property MyNoneAccessProp
        ∇ r←get
          r←1
        ∇
        ∇ set
        ∇
    :endproperty

    ∇ r←MySharedNiladicFnsWithResult
    ⍝ Niladic function with result, public shared
      :Access public shared
      r←'shared'
    ∇

    ∇ r←MyInstanceNiladicFnsWithResult
     ⍝ Niladic function with result, public instance
      :Access public Instance
      r←'Instance'
    ∇

    ∇ r←MyDefaultNiladicFnsWithResult
     ⍝ Niladic function with result, public
      :Access public
      r←'Default'
    ∇

    ∇ r←MySharedMonadicFnsWithResult y
      ⍝ Monadic function with result, shared
      :Access public shared
      r←'shared'
    ∇

    ∇ r←MyInstanceMonadicFnsWithResult y
      ⍝ Monadic function with result, instance
      :Access public Instance
      r←'Instance'
    ∇

    ∇ r←MyDefaultFnsMonadicWithResult y
      :Access public
      ⍝ Monadic function with result
      r←'Default'
    ∇

    ∇ r←x MySharedDyadicFnsWithResult y
    ⍝ Monadic function with result, shared
      :Access public shared
      r←'shared'
    ∇

    ∇ r←x MyInstanceDyadicFnsWithResult y
    ⍝ Dyadic function with result, instance
      :Access public Instance
      r←'Instance'
    ∇

    ∇ r←x MyDefaultFnsDyadicWithResult y
    ⍝ Dyadic function with result
      :Access public
      r←'Default'
    ∇

    ∇ r←{x}MySharedAmbiFnsWithResult y
    ⍝ Dyadic function with result, shared
      :Access public shared
      r←'shared'
    ∇

    ∇ r←{x}MyInstanceAmbiFnsWithResult y
     ⍝ Ambivalent function with result, instance
      :Access public Instance
      r←'Instance'
    ∇

    ∇ r←{x}MyDefaultFnsAmbiWithResult y
    ⍝ Ambivalent function with result
      :Access public
      r←'Default'
    ∇

⍝    ---------------------------

    ∇ MySharedNiladicFns;a;baa;c
    ⍝ Niladic function, shared
      :Access public shared
    ∇

    ∇ MyInstanceNiladicFns;a;baa;c
    ⍝ Niladic function, instance
      :Access public Instance
    ∇

    ∇ MyDefaultNiladicFns;a;baa;c
    ⍝ Niladic function
      :Access public
    ∇

    ∇ MySharedMonadicFns y;a;baa;c
    ⍝ Monadic function, shared
      :Access public shared
    ∇

    ∇ MyInstanceMonadicFns y;a;baa;c
    ⍝ Monadic function, instance
      :Access public Instance
    ∇

    ∇ MyDefaultFnsMonadic y;a;baa;c
    ⍝ Monadic function
      :Access public
    ∇

    ∇ x MySharedDyadicFns y;a;baa;c
    ⍝ Dyadic function, shared
      :Access public shared
    ∇

    ∇ x MyInstanceDyadicFns y;a;baa;c
    ⍝ Dyadic function, instance
      :Access public Instance
    ∇

    ∇ x MyDefaultFnsDyadic y;a;baa;c
    ⍝ Dyadic function,
      :Access public
    ∇

    ∇ {x}MySharedAmbiFns y;a;baa;c
    ⍝ Ambivalent function, shared
      :Access public shared
    ∇

    ∇ {x}MyInstanceAmbiFns y;a;baa;c
    ⍝ Ambivalent function, instance
      :Access public Instance
    ∇

    ∇ {x}MyDefaultFnsAmbi y;a;baa;c
    ⍝ Ambivalent function
      :Access public
    ∇

    ∇ {r}←{x}MySharedAmbiFnsWithShy y;a;baa;c
    ⍝ Ambivalent function with shy result, shared
      :Access public shared
    ∇

    ∇ {r}←{x}MyInstanceAmbiFnsWithShy y;a;baa;c
    ⍝ Ambivalent function with shy result, instance
      :Access public Instance
    ∇

    ∇ {r}←{x}MyDefaultFnsAmbiWithShy y;a;baa;c
    ⍝ Ambivalent function with shy result
      :Access public
    ∇

    ∇ Overridable
    ⍝ Niladic function that is public and overridable
      :Access Public Overridable
    ∇

    ∇ r←OverwriteMethodInEmbeddedClass
      :Access Public shared
      ⎕←'Outer class'
    ∇

 ⍝   -----------------------------------

    ∇ LocalFns1;a
      a←''
    ∇

    dynfns1←{⍵}

      dynfns2←{
          ⍺←1
          ⍵
      }

⍝   -----------------------------------

    ∇ make0
      :Access Public Instance
      ⍝ This comment is related to the niladic constructor
      ⍝ Two concatenated _
      ⍝ lines!
      ⍝ List:
      ⍝ * First
      ⍝ * Second
      :Implements Constructor
    ∇

    ∇ make1(arg1)
      ⍝ This comment is related to the monadic constructor _
      ⍝ which is designed to deal with exactly one parameter
      :Access Public Instance
      :Implements Constructor
    ∇

    ∇ make2(arg1 arg2)
      :Access Public  INstance
      ⍝ This comment is related to the monadic constructor _
      ⍝ able to deal with exactly two parameters
      :Implements Constructor
    ∇

    ∇ makeAny arg
      :Access  Public Instance
      :Implements  Constructor
      ⍝ This comment is related to the monadic constructor _
      ⍝ able to deal with any number of parameters
    ∇

    ∇ {r}←{left}EmptyFns right
      :Access  Public Instance
    ∇

    ∇ foo arg
      :Access  Public Instance
      ⎕←'Hello'
    ∇

    recursive←{⍵-1∇¨⍵ ⋄ 0<⍵:∇ ⍵ ⋄ 0}

      recursive2←{
          ⍵-1 ∇¨⍵
          0<⍵:∇ ⍵
          0
      }

    ∇ r←recursive3 value;recursive3
      recursive3←{
          ⍵-1 ∇¨⍵
          0<⍵:∇ ⍵
          0
      }
      r←recursive3 value
    ∇


 ⍝ ----------------------------------------

    ∇ Destroy
      :Implements  Destructor
      ⍝ This comment is related to the Destructor
      ⍝ Unordered List:
      ⍝ # A Topic
      ⍝ # Another Topic
    ∇

  ⍝ ----------------------------------------

    ∇ Copyright InClassItself
      :Access Public
      ⎕←'This must not be overwritten by :Inlcuded namespaces!'
    ∇

    ∇ r←AnInterface y
    ⍝ Implements an interface method relating to the "testinterface"
      :Implements Method testinterface.MonadicWithResult
      r←x,y
    ∇

    :Class local_1

        :include ##.APLTreeUtils

        ∇ r←hello
          :Access Public Shared
          r←'world'
        ∇

    :EndClass

    :Class local_2

        :include ##.APLTreeUtils

        ∇ make
          :Implements Constructor
          :Access Public
          _WHOM←'univers'
        ∇

        ∇ r←Hello
          :Access Public Instance
          r←_WHOM
        ∇

        ∇ r←OverwriteMethodInEmbeddedClass dummy
          :Access Public shared
          ⎕←'Embedded class'
        ∇

    :EndClass

:EndClass
